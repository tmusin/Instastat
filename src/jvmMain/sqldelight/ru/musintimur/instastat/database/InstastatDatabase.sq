CREATE TABLE IF NOT EXISTS profiles (
	profile_id INTEGER PRIMARY KEY AUTOINCREMENT,
	profile_name TEXT NOT NULL,
	is_active INTEGER AS Boolean NOT NULL DEFAULT 1
);
CREATE INDEX IF NOT EXISTS profiles_profile_name_id_idx ON profiles(profile_name);

CREATE TABLE IF NOT EXISTS profiles_history (
	profiles_history_id INTEGER PRIMARY KEY AUTOINCREMENT,
	profile_id INTEGER NOT NULL,
	metering_date TEXT NOT NULL,
	count_posts INTEGER NOT NULL DEFAULT 0,
	count_followers INTEGER NOT NULL DEFAULT 0,
	count_followings INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT profiles_history_fk FOREIGN KEY (profile_id) REFERENCES profiles(profile_id) ON UPDATE RESTRICT ON DELETE RESTRICT
);
CREATE INDEX IF NOT EXISTS profiles_history_profile_id_idx ON profiles_history(profile_id);

CREATE TABLE IF NOT EXISTS posts (
	post_id INTEGER PRIMARY KEY AUTOINCREMENT,
	post_url TEXT NOT NULL,
	post_date TEXT,
	post_text TEXT,
	comments_count INTEGER NOT NULL DEFAULT 0
);
CREATE UNIQUE INDEX IF NOT EXISTS posts_post_url_id_idx ON posts(post_url);

CREATE TABLE IF NOT EXISTS comments (
    comment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    comment_author TEXT NOT NULL,
    comment_text TEXT NOT NULL,
    CONSTRAINT comments_fk FOREIGN KEY (post_id) REFERENCES posts(post_id) ON UPDATE RESTRICT ON DELETE RESTRICT
);
CREATE INDEX IF NOT EXISTS comments_post_id_idx ON comments(post_id);
CREATE INDEX IF NOT EXISTS comments_author_idx ON comments(comment_author);

getAllProfiles:
SELECT * FROM profiles;

getAllActiveProfiles:
SELECT * FROM profiles
    WHERE is_active = 1;

getAllActiveProfilesForUpdate:
SELECT p.* FROM profiles p
WHERE is_active = 1
AND NOT EXISTS (
    SELECT ph.profiles_history_id
    FROM profiles_history ph
    WHERE ph.profile_id = p.profile_id
    AND date(metering_date) = DATE('now', 'localtime')
);

getProfileByName:
SELECT p.* FROM profiles p
WHERE p.profile_name = :profileName;

getLastMeasure:
SELECT MAX(date(metering_date)) result
    FROM profiles_history;

insertNewStatistics:
INSERT INTO profiles_history(profile_id, metering_date, count_posts, count_followers, count_followings)
    VALUES (:profile_id, DATETIME('now', 'localtime'), :count_posts, : count_followers, :count_followings);

compareDates:
SELECT p.profile_name,
    ph1.count_posts cp1, ph2.count_posts cp2,
    ph1.count_followers cfl1, ph2.count_followers cfl2,
    ph1.count_followings cfg1, ph2.count_followings cfg2
FROM profiles p
    INNER JOIN profiles_history ph1 ON p.profile_id=ph1.profile_id
    INNER JOIN profiles_history ph2 ON p.profile_id=ph2.profile_id
WHERE date(ph1.metering_date) = :date AND
    date(ph2.metering_date) = (SELECT MAX(date(ph3.metering_date)) result
                                   FROM profiles_history ph3
                                   WHERE ph3.profile_id = ph2.profile_id AND
                                   (date(metering_date) < :date OR
                                       (date(ph3.metering_date) = :date AND NOT EXISTS
                                           (SELECT ph4.profiles_history_id FROM profiles_history ph4
                                           WHERE ph4.profile_id = ph2.profile_id AND date(ph4.metering_date) < :date)
                                       )
                                   ))
ORDER BY p.profile_name;

getProfileHistoryPosts:
SELECT metering_date, count_posts FROM (
SELECT ph.metering_date, ph.count_posts
FROM profiles_history ph
WHERE ph.profile_id = :profileId
AND date(ph.metering_date) BETWEEN :date1 AND :date2
ORDER BY ph.metering_date DESC)
ORDER BY metering_date;

getProfileHistoryFollowers:
SELECT metering_date, count_followers FROM (
SELECT ph.metering_date metering_date, ph.count_followers
FROM profiles_history ph
WHERE ph.profile_id = :profileId
AND date(ph.metering_date) BETWEEN :date1 AND :date2
ORDER BY ph.metering_date DESC)
ORDER BY metering_date;

getProfileHistoryFollowings:
SELECT metering_date, count_followings FROM (
SELECT ph.metering_date metering_date, ph.count_followings
FROM profiles_history ph
WHERE ph.profile_id = :profileId
AND date(ph.metering_date) BETWEEN :date1 AND :date2
ORDER BY ph.metering_date DESC)
ORDER BY metering_date;

setProfileActivity:
UPDATE profiles SET is_active = :isActive
WHERE profile_id = :profileId;

insertNewProfile:
INSERT INTO profiles (profile_name, is_active)
VALUES (:profileName, 1);

getAllPosts:
SELECT * FROM posts ORDER BY post_date DESC;

getPostByUrl:
SELECT p.* FROM posts p
WHERE p.post_url = :postUrl;

getPostById:
SELECT p.* FROM posts p
WHERE p.post_id = :postId;

insertNewPost:
INSERT INTO posts (post_url) VALUES (:postUrl);

updatePostDateTime:
UPDATE posts SET post_date = :postDate
WHERE post_url = :postUrl;

updatePostText:
UPDATE posts SET post_text = :postText
WHERE post_url = :postUrl;

updatePostCommentsCount:
UPDATE posts SET comments_count = :commentsCount
WHERE post_url = :postUrl;

getPostComments:
SELECT * FROM comments WHERE post_id = :postId;

insertNewComment:
INSERT INTO comments (post_id, comment_author, comment_text)
VALUES (:postId, :commentAuthor, :commentText);

findComment:
SELECT * FROM comments
WHERE post_id = :postId
AND comment_author = :commentAuthor
AND comment_text = :commentText;

calculatePostComments:
SELECT COUNT(*) FROM comments
WHERE post_id = :postId;